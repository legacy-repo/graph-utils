COUNT_RELATIONSHIPS:
    'name': "count_relationships"
    'description': "Counts the number of relationships of a given type"
    'query': "MATCH (:ENTITY1)-[:RELATIONSHIP]->(:ENTITY2) return count(*) AS count;"

REMOVE_RELATIONSHIPS:
    'name': "remove_relationship"
    'description': "Removes the specified relationship type between the specified entity types"
    'query': "MATCH (:ENTITY1)-[r:RELATIONSHIP]->(:ENTITY2) delete r;"

REMOVE_NODE:
    'name': "remove_node"
    'description': "Removes all the instances of the specified type of node"
    'query': 'all apoc.periodic.iterate("MATCH (n:ENTITY) return n", "DETACH DELETE n", {batchSize:1000}) yield batches, total return batches, total'

# Ontologies
IMPORT_ONTOLOGY_DATA:
    'name': "import ontology data"
    'description': "Creates all the onotology nodes and has parent relationships"
    'query': >
        CREATE CONSTRAINT ON (e:ENTITY) ASSERT e.id IS UNIQUE;
        CREATE INDEX ON :ENTITY(name);  
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/ENTITY.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (e:ENTITY {id:line.ID})
        ON CREATE SET e.name=line.name,e.description=line.description,e.type=line.type,e.synonyms=SPLIT(line.synonyms,',')
        RETURN COUNT(e) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/ENTITY_has_parent.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (e1:ENTITY{id:line.START_ID})
        MATCH (e2:ENTITY{id:line.END_ID})
        MERGE (e1)-[r:HAS_PARENT]->(e2)
        RETURN COUNT(r) AS c;

IMPORT_ONTOLOGY_MAPPING_DATA:
    'name': "import ontology mappings"
    'description': "Creates relationships between different onotologies (i.e (EFO)-[:MAPS_TO]->(Disease)"
    'query': >
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/ENTITY1_maps_to_ENTITY2.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (e1:ENTITY1{id:line.START_ID})
        MATCH (e2:ENTITY2{id:line.END_ID})
        MERGE (e1)-[r:MAPS_TO]->(e2)
        RETURN COUNT(r) AS c;


# Databases
IMPORT_GENE_DATA:
    'name': 'import gene data'
    'description': 'Creates the Gene nodes'
    'query': >
        CREATE CONSTRAINT ON (g:Gene) ASSERT g.id IS UNIQUE;
        CREATE CONSTRAINT ON (g:Gene) ASSERT g.name IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/HGNC_MGI/Gene.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (g:Gene {id:line.ID})
        ON CREATE SET g.name=line.name,g.family=line.family,g.taxid=line.taxid,g.synonyms=SPLIT(line.synonyms,',')
        RETURN COUNT(g) AS c;

IMPORT_CHROMOSOME_DATA:
    'name': 'import chromosome data'
    'description': 'Creates the Chromosome nodes'
    'query': >
        CREATE CONSTRAINT ON (c:Chromosome) ASSERT c.id IS UNIQUE;
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RefSeq/Chromosome.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (c:Chromosome {id:line.ID})
        ON CREATE SET c.name=line.name,c.taxid=line.taxid
        RETURN COUNT(c) AS c;

IMPORT_TRANSCRIPT_DATA:
    'name': 'import transcript data'
    'description': 'Creates the Transcript nodes and the relationships to Chromosome and Gene nodes'
    'query': >
        CREATE CONSTRAINT ON (t:Transcript) ASSERT t.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RefSeq/Transcript.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (t:Transcript {id:line.ID})
        ON CREATE SET t.name=line.name,t.class=line.class,t.taxid=line.taxid,t.assembly=line.assembly
        RETURN COUNT(t) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RefSeq/refseq_located_in.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (t:Transcript {id:line.START_ID})
        MATCH (c:Chromosome {id:line.END_ID})
        MERGE (t)-[r:LOCATED_IN{start:line.start,end:line.end,strand:line.strand}]->(c)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RefSeq/refseq_transcribed_into.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (g:Gene {id:line.START_ID})
        MATCH (t:Transcript {id:line.END_ID})
        MERGE (g)-[r:TRANSCRIBED_INTO]->(t)
        RETURN COUNT(r) AS c;

IMPORT_PROTEIN_DATA:
    'name': "import protein data"
    'description': "Creates Protein and Peptide nodes, their relationship and relationships to Gene and Transcript nodes"
    'query': >
        CREATE INDEX ON :Protein(name);
        CREATE INDEX ON :Protein(accession);
        CREATE CONSTRAINT ON (p:Protein) ASSERT p.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Protein.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (p:Protein {id:line.ID})
        ON CREATE SET p.accession=line.accession,p.name=line.name,p.description=line.description,p.taxid=line.taxid,p.synonyms=SPLIT(line.synonyms,',');
        CREATE CONSTRAINT ON (a:Amino_acid_sequence) ASSERT a.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Amino_acid_sequence.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (aa:Amino_acid_sequence {id:line.ID})
        ON CREATE SET aa.header=line.header,aa.sequence=line.sequence,aa.size=line.size,aa.source=line.source;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Protein_HAS_Sequence_Amino_acid_sequence.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (aa:Amino_acid_sequence {id:line.END_ID})
        MERGE (p)-[r:HAS_SEQUENCE{source:line.source}]->(aa)
        RETURN COUNT(p) AS c;
        CREATE CONSTRAINT ON (p:Peptide) ASSERT p.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Peptide.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (p:Peptide{id:line.ID})
        ON CREATE SET p.type=line.type,p.unique=line.unique
        RETURN COUNT(p) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Peptide_belongs_to_protein.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p1:Peptide {id:line.START_ID})
        MATCH (p2:Protein {id:line.END_ID})
        MERGE (p1)-[r:BELONGS_TO_PROTEIN{source:line.source}]->(p2)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Protein_gene_translated_into.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (g:Gene {id:line.START_ID})
        MATCH (p:Protein {id:line.END_ID})
        MERGE (g)-[r:TRANSLATED_INTO]->(p)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Protein_transcript_translated_into.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (t:Transcript {id:line.START_ID})
        MATCH (p:Protein {id:line.END_ID})
        MERGE (t)-[r:TRANSLATED_INTO]->(p)
        RETURN COUNT(r) AS c;

IMPORT_PROTEIN_ANNOTATIONS:
    'name': 'import protein annotations'
    'description': 'Loads into the database all the Protein nodes annotations: Gene Ontology terms'
    'query': >
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Cellular_component_associated_with.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (c:Cellular_component {id:line.END_ID})
        MERGE (p)-[r:ASSOCIATED_WITH{score:toFloat(line.score),source:line.source,evidence_type:line.evidence_type}]->(c)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Molecular_function_associated_with.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (f:Molecular_function {id:line.END_ID})
        MERGE (p)-[r:ASSOCIATED_WITH{score:toFloat(line.score),source:line.source,evidence_type:line.evidence_type}]->(f)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/UniProt/Biological_process_associated_with.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (b:Biological_process {id:line.END_ID})
        MERGE (p)-[r:ASSOCIATED_WITH{score:toFloat(line.score),source:line.source,evidence_type:line.evidence_type}]->(b)
        RETURN COUNT(r) AS c;

IMPORT_MODIFIED_PROTEINS:
    'name': 'import modified proteins'
    'description': 'Creates Modified_protein nodes and loads the relationships to Modification, Protein and Peptide nodes'
    'query': >
        CREATE CONSTRAINT ON (m:Modified_protein) ASSERT m.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_Modified_protein.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (m:Modified_protein {id:line.ID})
        ON CREATE SET m.protein=line.protein,m.position=line.position,m.residue=line.residue,m.sequence_window=line.sequence_window,m.source=line.source
        RETURN COUNT(m) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_modified_protein_has_modification.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (mp:Modified_protein {id:line.START_ID})
        MATCH (m:Modification {id:line.END_ID})
        MERGE (mp)-[r:HAS_MODIFICATION{source:line.source}]->(m)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_protein_has_modified_site.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (mp:Modified_protein {id:line.END_ID})
        MERGE (p)-[r:HAS_MODIFIED_SITE]->(mp)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_peptide_has_modified_site.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Peptide {id:line.START_ID})
        MATCH (mp:Modified_protein {id:line.END_ID})
        MERGE (p)-[r:HAS_MODIFIED_SITE]->(mp)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_substrate_is_substrate_of.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (m:Modified_protein {id:line.START_ID})
        MATCH (p:Protein {id:line.END_ID})
        MERGE (m)-[r:IS_SUBSTRATE_OF{score:toFloat(line.score),regulation:line.regulation,source:line.source,evidence_type:line.evidence_type}]->(p)
        RETURN COUNT(r) AS c;

IMPORT_MODIFIED_PROTEIN_ANNOTATIONS:
    'name': 'import modified protein annotations'
    'description': 'Loads into the database all the Modified_protein nodes annotations: relationship to Disease and to Biological_processes'
    'query': >
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_disease_associated_with.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (m:Modified_protein {id:line.START_ID})
        MATCH (d:Disease {id:line.END_ID})
        MERGE (m)-[r:ASSOCIATED_WITH{score:toFloat(line.score),source:line.source,evidence_type:line.evidence_type,publications:line.publications}]->(d)
        RETURN COUNT(r) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/RESOURCE/RESOURCE_biological_process_associated_with.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (m:Modified_protein {id:line.START_ID})
        MATCH (b:Biological_process {id:line.END_ID})
        MERGE (m)-[r:ASSOCIATED_WITH{score:toFloat(line.score),source:line.source,evidence_type:line.evidence_type,publications:line.publications,action:line.action}]->(b)
        RETURN COUNT(r) AS c;

IMPORT_PROTEIN_STRUCTURES:
    'name': 'import protein structure data'
    'description': 'Creates Protein structure nodes and their relationships to Protein nodes'
    'query': >
        CREATE CONSTRAINT ON (p:Protein_structure) ASSERT p.id IS UNIQUE;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/Protein_structures.tsv" AS line
        FIELDTERMINATOR '\t'
        MERGE (s:Protein_structure {id:line.ID})
        ON CREATE SET s.source=line.source,s.link=line.link
        RETURN COUNT(s) AS c;
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///IMPORTDIR/Protein_has_structure.tsv" AS line
        FIELDTERMINATOR '\t'
        MATCH (p:Protein {id:line.START_ID})
        MATCH (s:Protein_structure {id:line.END_ID})
        MERGE (p)-[r:HAS_STRUCTURE{source:line.source}]->(s)
        RETURN COUNT(r) AS c;
